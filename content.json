{"meta":{"title":"昌久个人博客","subtitle":"我是子标题不知道说啥","description":"","author":"昌久","url":"https://luchangjiu.github.io","root":"/"},"pages":[{"title":"404 Not Found：该页无法显示","date":"2023-03-05T13:26:31.492Z","updated":"2022-04-13T15:22:53.000Z","comments":false,"path":"/404.html","permalink":"https://luchangjiu.github.io/404.html","excerpt":"","text":""},{"title":"关于","date":"2023-03-05T13:26:31.493Z","updated":"2022-04-13T15:22:53.000Z","comments":false,"path":"about/index.html","permalink":"https://luchangjiu.github.io/about/index.html","excerpt":"","text":"个人详细介绍"},{"title":"书单","date":"2023-03-05T13:26:31.494Z","updated":"2022-04-13T15:22:53.000Z","comments":false,"path":"books/index.html","permalink":"https://luchangjiu.github.io/books/index.html","excerpt":"","text":""},{"title":"分类","date":"2023-03-05T13:26:31.495Z","updated":"2022-04-13T15:22:53.000Z","comments":false,"path":"categories/index.html","permalink":"https://luchangjiu.github.io/categories/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2023-03-05T13:26:31.496Z","updated":"2022-04-13T15:22:53.000Z","comments":true,"path":"links/index.html","permalink":"https://luchangjiu.github.io/links/index.html","excerpt":"","text":""},{"title":"标签","date":"2023-03-05T13:26:31.499Z","updated":"2022-04-13T15:22:53.000Z","comments":false,"path":"tags/index.html","permalink":"https://luchangjiu.github.io/tags/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2023-03-05T13:26:31.497Z","updated":"2022-04-13T15:22:53.000Z","comments":false,"path":"repository/index.html","permalink":"https://luchangjiu.github.io/repository/index.html","excerpt":"","text":""}],"posts":[{"title":"Hello World","slug":"hexo/hello-world","date":"2023-03-05T13:32:49.919Z","updated":"2022-04-13T15:22:53.000Z","comments":true,"path":"2023/03/05/hexo/hello-world/","link":"","permalink":"https://luchangjiu.github.io/2023/03/05/hexo/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]},{"title":"linux 使用ssh免密向window 传输数据","slug":"linux/linux-tranf-to-win","date":"2022-04-27T13:56:01.000Z","updated":"2022-04-27T15:44:35.000Z","comments":true,"path":"2022/04/27/linux/linux-tranf-to-win/","link":"","permalink":"https://luchangjiu.github.io/2022/04/27/linux/linux-tranf-to-win/","excerpt":"","text":"说明最近遇到 数据库云服务器是linux 系统，但是本地备份的物理机系统是win7 的，这时需要从linux 服务器上拷贝数据并且需要免密传输（方便写shell 脚本）. 依赖CenterOS 7 自带ssh 服务Windows7 默认你已经安装了OpenSSH 服务(没安装可以先去安装了) 使用ssh 生成密钥在linux 服务器端生成rsa密钥 输入以下命令后，出现的提示可以根据提示录入地址或者配置密码，我这里直接都是按回车，使用默认的就好 123ssh-keygen -t rsa 将生成的密钥复制到windows 系统上在linux 系统上使用scp 命令复制过去我这里使用的是root 帐号生成的rsa密钥默认在 &#x2F;root&#x2F;.ssh 目录下 如果你不是使用root 帐号，那么默认生成的rsa 密钥在 &#x2F;home&#x2F;你的帐号&#x2F;.ssh 目录下 1234# 这里传输到windows d 盘目录scp /root/.ssh/id_rsa.pub Administrator@你的windowip地址:/d:/ 修改windows openssh 配置文件进入 c:&#x2F;&#x2F;ProgramData&#x2F;&#x2F;ssh 打开文件 sshd_config 找到节点PubkeyAuthentication yes 将这行的注释取消然后注释掉下面两行Match Group admiistrators AuthorizedKeysFile PROGRADDATA&#x2F;ssh&#x2F;administrators_authorized_keys 配置windows openssh 的密钥文件进入C:&#x2F;&#x2F;用户&#x2F;&#x2F;你当前的用户名&#x2F;&#x2F;.ssh 然后将刚刚linux 上传到D盘的id_rsa.pub 文件复制到 .ssh 目录上并改名为 authorized_keys 注意： 如果没有.ssh 文件可以使用cmd 命令行 mkdir .ssh 创建 配置后记得重启openssh 相关的服务. 测试是否成功切换回我们的linux输入以下命令 123ssh Administrator@你的windows IP 地址 如果不需要密码能直接链接那么就表示配置成功了，可以编写shell 脚本ssh 命令了","categories":[],"tags":[{"name":"linux","slug":"linux","permalink":"https://luchangjiu.github.io/tags/linux/"}]},{"title":"oracle 在linux 系统的备份脚本","slug":"oracle/oracle-linux-backup-script","date":"2022-04-27T04:13:23.000Z","updated":"2022-05-04T08:47:54.000Z","comments":true,"path":"2022/04/27/oracle/oracle-linux-backup-script/","link":"","permalink":"https://luchangjiu.github.io/2022/04/27/oracle/oracle-linux-backup-script/","excerpt":"","text":"说明centos7 上oracle 数据库的备份脚本 依赖centos7 上安装了oracle 数据库且安装的用户是oracle且oracle 用户的环境可以使用oracle 相关的命令，如sqlplus 等命令. 创建oracle 的备份目录12345678910111213141516-- 查询已经存在的directoryselect * from dba_directories;-- 创建一个名为 oracle_dbbk 的目录 并指向 /data/oracle_dbbk 路径create or replace directory oracle_dbbk as &#x27;/data/oracle_dbbk&#x27;;-- 使用数据库管理员帐号授权可操作directory 的帐号权限grant read, write on directory oracle_dbbk to 你自己的帐号;-- 删除目录drop directory oracle_dbbk; shell脚本代码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859#!/bin/sh# 加载当前 oracle 帐号的环境变量source /home/oracle/.bash_profile# 获取当前时间CURDATE=$(date &#x27;+%Y%m%d%H%M%S&#x27;)# 备份目录backup_directory=/data/oracle_dbbk# 备份文件名的前缀data_file_prefix=orcl_bak_# 拼接备份文件dmp 的文件名 加上当前的时间BACKUP_FILE_NAME=$data_file_prefix$CURDATE.dmp LOG_BACKUP_FILE_NAME=$data_file_prefix$CURDATE.log # 拼接日志文件log 的文件名 加上当前的时间BACKUP_FILE=$backup_directory/$BACKUP_FILE_NAMELOG_BACKUP_FILE=$backup_directory/$LOG_BACKUP_FILE_NAMEecho $BACKUP_FILEecho $LOG_BACKUP_FILE# 一个删除5 天前的的备份数据文件delete_prev_data_file() &#123; premonth=$(date -d&quot;5 days ago&quot; &#x27;+%Y%m%d&#x27;) rm -rf $backup_directory/$data_file_prefix$premonth* || true&#125;# 进入到备份目录cd $backup_directory # 设置oracle 的导出命令bak_exec=&quot;expdp oracle数据库帐号/密码 directory=oracle_dbbk dumpfile=$BACKUP_FILE_NAME logfile=$LOG_BACKUP_FILE_NAME schemas=数据库帐号名 job_name=exp_user_schema&quot;# 执行oracle expdp 导出命令$bak_exececho &#x27;delete pre feils ..... &#x27;# 调用删除前 5 天的函数delete_prev_data_file# 下面是可选项 将已经生成的备份文件通过ssh 命令 发送到存储数据的服务器# 前提是 两台机器需要通过ssh 密钥验证才能免密码传输 # sendToDiskServer=&quot;scp $BACKUP_FILE xxk@192.168.1.121:/e:/oracle_bak/files &quot;;# $sendToDiskServerexit 0 设置定时任务这里设置的是凌晨1 点同步的任务 使用 crontab -e 命令，然后录入 00 01 * * * /data/oracle_bakup.sh 录入完成后输入 :wq 退出编辑即可","categories":[],"tags":[{"name":"oracle","slug":"oracle","permalink":"https://luchangjiu.github.io/tags/oracle/"}]},{"title":"Windows 安装OpenSSH 实现ssh传输","slug":"windows/win-openssh-install","date":"2022-04-26T05:28:03.000Z","updated":"2022-04-27T14:37:28.000Z","comments":true,"path":"2022/04/26/windows/win-openssh-install/","link":"","permalink":"https://luchangjiu.github.io/2022/04/26/windows/win-openssh-install/","excerpt":"","text":"说明windows 使用 ssh 安全协议 依赖windows7以上openssh7 以上 下载打开github 点击 Win32-OpenSSH选择相应的版本，32 位的操作系统就选32的，64就选64 的安装 安装懒得打直接去wiki 上看吧 openssh install page","categories":[],"tags":[{"name":"windows","slug":"windows","permalink":"https://luchangjiu.github.io/tags/windows/"}]},{"title":"springboot i18n 支持国际化","slug":"java/spring-boot-2.6.6-i18n","date":"2022-04-25T14:23:00.000Z","updated":"2022-04-26T13:48:44.000Z","comments":true,"path":"2022/04/25/java/spring-boot-2.6.6-i18n/","link":"","permalink":"https://luchangjiu.github.io/2022/04/25/java/spring-boot-2.6.6-i18n/","excerpt":"","text":"说明springboot 使用i18n 国际化语言，可以互相切换 依赖java1.8springboot 2.6.6maven 4.0 maven 配置1234567891011121314151617181920212223242526272829303132333435363738394041424344454647&lt;parent&gt; &lt;artifactId&gt;spring-boot-parent&lt;/artifactId&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;version&gt;2.6.6&lt;/version&gt; &lt;relativePath /&gt;&lt;/parent&gt;&lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!-- 这里我使用 thymeleaf 模板引擎 方便 页面展示 --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!-- 在页面引入jquery 使用i18n 国际化api --&gt; &lt;dependency&gt; &lt;groupId&gt;org.webjars&lt;/groupId&gt; &lt;artifactId&gt;webjars-locator-core&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.webjars&lt;/groupId&gt; &lt;artifactId&gt;jquery&lt;/artifactId&gt; &lt;version&gt;3.6.0&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.webjars.bower&lt;/groupId&gt; &lt;artifactId&gt;jquery-i18n-properties&lt;/artifactId&gt; &lt;version&gt;1.2.7&lt;/version&gt; &lt;/dependency&gt;&lt;/dependencies&gt; 项目结构在resources 目录下新增文件夹 static&#x2F;i18n 在i18n文件夹上新增的properties 文件 默认文件这个是必须的 可以不填写内容messages.properties中文 messages_zh_CN.properties 12helloword=你好 世界 英文messages_en_US.properties 12helloword=hello world 需要将编写的文件格式设置为utf-8 以防乱码 配置yml这里仅展示主要的配置,其他配置节点就不写了 123456789101112spring: messages: encoding: utf-8 basename: static/i18n/messages thymeleaf: prefix: classpath:/templates/ suffix: .html mode: HTML5 encoding: UTF-8 cache: false java 代码使用配置语言拦截器切换123456789101112131415161718192021222324252627282930313233import org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.web.servlet.config.annotation.InterceptorRegistry;import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;import org.springframework.web.servlet.i18n.AcceptHeaderLocaleResolver;import javax.servlet.http.HttpServletRequest;import java.util.Locale;@Configurationpublic class WebMvcConfig implements WebMvcConfigurer&#123; @Bean public AcceptHeaderLocaleResolver localeResolver(WebMvcProperties mvcProperties) &#123; AcceptHeaderLocaleResolver localeResolver = new AcceptHeaderLocaleResolver() &#123; @Override public Locale resolveLocale(HttpServletRequest request) &#123; // 配置 lang 切换语言时请求设置 String locale = request.getParameter(&quot;lang&quot;); return locale != null ? org.springframework.util.StringUtils.parseLocaleString(locale) : super.resolveLocale(request); &#125; &#125;; localeResolver.setDefaultLocale(Locale.CHINA); return localeResolver; &#125;&#125; java 中使用配置工具类可以方便的使用配置完成后可以使用 LocalUtil.get(\"helloworld\") 获取到国际化文本内容 123456789101112131415161718192021222324import org.springframework.context.MessageSource;import org.springframework.context.i18n.LocaleContextHolder;import org.springframework.stereotype.Component;@Componentpublic class LocalUtil &#123; private static MessageSource messageSource; public LocalUtil(MessageSource messageSource)&#123; LocalUtil.messageSource = messageSource; &#125; public static String get(String key) &#123; try &#123; return LocalUtil.messageSource.getMessage(key, null, LocaleContextHolder.getLocale()); &#125;catch (Exception ex) &#123; return key; &#125; &#125;&#125; thymeleaf 页面中使用Controller 配置index 跳转 页面代码 12345678910111213141516171819202122import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.ResponseBody;@Controller@RequestMappingpublic class HomeController &#123; @RequestMapping(&quot;/get-local&quot;) @ResponseBody public String getLocal() &#123; return LocalUtil.get(&quot;helloworld&quot;); &#125; @RequestMapping public String index() &#123; return &quot;index&quot;; &#125;&#125; 配置 index.html 页面代码 123456789101112&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot; xmlns:th=&quot;http://www.thymeleaf.org&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title th:text=&quot;#&#123;helloword&#125;&quot;&gt;&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h1 th:text=&quot;#&#123;helloword&#125;&quot;&gt;&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt; 页面jquery 使用i18n配置index.html 页面代码 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot; xmlns:th=&quot;http://www.thymeleaf.org&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title th:text=&quot;#&#123;helloworld&#125;&quot;&gt;&lt;/title&gt; &lt;!-- 引入jquery i18n 相关js --&gt; &lt;script th:src=&quot;@&#123;/webjars/jquery/jquery.min.js&#125;&quot;&gt;&lt;/script&gt; &lt;script th:src=&quot;@&#123;/webjars/jquery-i18n-properties/jquery.i18n.properties.min.js&#125;&quot;&gt;&lt;/script&gt; &lt;script th:inline=&quot;javascript&quot;&gt; // 引入基础路径 var ROOT = [[$&#123;#servletContext.contextPath&#125;]] ; // 获取语言和国家 var LANG_COUNTRY = [[$&#123;#locale.language+&#x27;_&#x27;+#locale.country&#125;]] ; // 初始化i18n 插件 $.i18n.properties(&#123; path: ROOT + &#x27;/i18n/&#x27;, //基础访问路径 name: &#x27;messages&#x27;, // i18n 文件开头 language: LANG_COUNTRY, encoding: &#x27;utf-8&#x27;, mode: &#x27;map&#x27; &#125;); // 初始化 获取i18n 获取的函数 function getI18N(key) &#123; try&#123; return $.i18n.prop(key); &#125; catch(e) &#123; console.log(e); return key; &#125; &#125; //输出i18n 文本 console.log(getI18N(&#x27;helloworld&#x27;)); &lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;h1 th:text=&quot;#&#123;helloworld&#125;&quot;&gt;&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt; 启动并测试启动后 录入地址 java 代码获取测试访问中文http://localhost:8080/get-local?lang=zh_CN访问英文http://localhost:8080/get-local?lang=en_US 网页获取测试 访问中文页面http://localhost:8080/?lang=zh_CN访问英文页面http://localhost:8080/?lang=en_US","categories":[],"tags":[{"name":"java","slug":"java","permalink":"https://luchangjiu.github.io/tags/java/"}]},{"title":"ubuntu 安装rar 解压工具","slug":"linux/ubuntu-rar-install","date":"2022-04-17T12:27:03.000Z","updated":"2022-04-17T12:36:21.000Z","comments":true,"path":"2022/04/17/linux/ubuntu-rar-install/","link":"","permalink":"https://luchangjiu.github.io/2022/04/17/linux/ubuntu-rar-install/","excerpt":"","text":"环境ubuntu 20.04 安装步骤12345678910111213# 安装压缩工具sudo apt-get install rar# 卸载sudo apt-get remove rar# 安装解压工具sudo apt-get install unrar# 卸载sudo apt-get reomve unrar 使用方法123456789101112# 压缩文件# 示例 rar a 压缩文件名 压缩文件夹名称rar a myrar.rar files# 解压文件# 示例 unrar e 解压文件 解压到文件夹名称unrar e myrar.rar myrar# 或者使用rar x 压缩文件 也可以解压rar x myrar.rar","categories":[],"tags":[{"name":"linux","slug":"linux","permalink":"https://luchangjiu.github.io/tags/linux/"}]},{"title":"C# Winform 解决程序多开","slug":"donet/winform-app-mutex","date":"2022-04-17T07:04:02.000Z","updated":"2022-04-17T08:23:51.000Z","comments":true,"path":"2022/04/17/donet/winform-app-mutex/","link":"","permalink":"https://luchangjiu.github.io/2022/04/17/donet/winform-app-mutex/","excerpt":"","text":"说明在开发winform 程序是，有时要求程序只能打开一个，这时可以使用Mutex 类来控制具体详细文档请看微软 Mutex 代码示例1234567891011121314[STAThread]static void Main(string[] args) &#123; var createNew = false; var mutex = new Mutex(true, &quot;program.exe&quot;, out createNew); if(!createNew) &#123; MessageBox.Show(&quot;该程序已在运行！&quot;); return; &#125; Application.Run(new Form1());&#125;","categories":[],"tags":[{"name":"C#","slug":"C","permalink":"https://luchangjiu.github.io/tags/C/"}]},{"title":"扩展easyui datagrid 编辑网格插件","slug":"easyui/easyui-datagrid-extension-1","date":"2022-04-09T08:18:23.000Z","updated":"2022-04-25T16:30:33.000Z","comments":true,"path":"2022/04/09/easyui/easyui-datagrid-extension-1/","link":"","permalink":"https://luchangjiu.github.io/2022/04/09/easyui/easyui-datagrid-extension-1/","excerpt":"","text":"说明扩展datagrid 的编辑，实现使用方向来进行表格编辑操作，减少编辑一行就动一下鼠标的麻烦。 依赖从easyui 上扩展的，依赖jquery,easyui GridEdit 扩展内容属性 名称 类型 描述 默认值 hasDeleteColumn boolean 是否在最后一列生成删除操作列 true deleteColumnWidth int 生成删除操作列的宽度 50 primarykey string 设置列主键字段 id 事件 名称 参数 描述 onDeleteRow value,row,index 点击删除按钮时触发，如果是没有主键值则默认删除但是也会触发。 value: 当前行id row: 当前行json对象 index:当前行索引 onInitNewRow index 新增一行时触发index: 新增行索引 返回值： 返回值对象将会用作当前行的对象值，不返回则使用默认的新增空值对象 方法 名称 参数 描述 endEdit index index为正在编辑的行， 不传参数则默认结束正在编辑的行 clear none 清空当前表格所有的数据并保留编辑行 插件代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340341342343344345346347348349350351352353354355356357358359360361362363364365366367368369370371372373374375376377378379380381382383384385386387388389390391392393394395396397398399400401402403404405406407408409410411412413414415416417418419420421422423424425426427428429/* 扩展datagrid 让其可以通过方向键来进行数据的编辑 建议 独立新创建一个文件来保存此代码*/&quot;use strict&quot;;$(function () &#123; $.fn.gridedit = function (options,param) &#123; if (typeof options === &#x27;string&#x27;) &#123; if($.fn.gridedit.methods[options]) &#123; return $.fn.gridedit.methods[options](this, param); &#125; else &#123; var $tb = $(this); var args = arguments; return $tb.datagrid.apply($tb, args); &#125; &#125; options = options || &#123;&#125;; return this.each(function () &#123; var state = $.data(this, &#x27;gridedit&#x27;); var opts; if (state) &#123; opts = $.extend(state.options, options); state.options = opts; &#125; else &#123; options = $.extend(&#123;&#125;, $.fn.gridedit.defaults, options); // 扩展默认的属性 var defaults = &#123; hasDeleteColumn: true, //是否有删除列 deleteColumnWidth: 50, //删除列宽 onDeleteRow: function (value, row, index) &#123; &#125;, //执行远程删除事件 singleSelect: true, //默认单选 primarykey: &#x27;id&#x27;, //默认列的id属性 用于生成删除按钮时使用 onInitNewRow: function (index) &#123; &#125;, // 新增行时触发 ， 参数是索引，需要返回一个新增的行对象，用于操作 onLoadSuccess: function () &#123; &#125; &#125;; options = $.extend(defaults, options || &#123;&#125;); opts = options; $.data(this, &#x27;gridedit&#x27;, &#123;options: opts&#125;); &#125; var _grid = &#123; //表格的JQuery 对象 grid: null, //当前操作索引 editIndex: undefined, //结束正在编辑的行 endEditing: function () &#123; if (this.editIndex == undefined) return true; if (this.grid.datagrid(&#x27;validateRow&#x27;, this.editIndex)) &#123; this.grid.datagrid(&#x27;endEdit&#x27;, this.editIndex); this.renderDeleteButtom(); this.editIndex = undefined; return true; &#125; else &#123; return false; &#125; &#125;, //渲染最后一列删除按钮 renderDeleteButtom: function () &#123; $(&#x27;.col-delete-btn&#x27;).linkbutton(&#123;text: &#x27;删除&#x27;, plain: true, iconCls: &#x27;icon-remove&#x27;&#125;); &#125;, //初始化第一可编辑行 initialBeginEditorRow: function () &#123; var rows = this.grid.datagrid(&#x27;getRows&#x27;); if (rows.length == 0) &#123; this.grid.datagrid(&#x27;appendRow&#x27;, options.onInitNewRow.call(this.grid, 0) || &#123;&#125;); this.grid.datagrid(&#x27;selectRow&#x27;, 0).datagrid(&#x27;beginEdit&#x27;, 0); this.grid.datagrid(&#x27;beginEdit&#x27;, 0); var editors = this.grid.datagrid(&#x27;getEditors&#x27;, 0); this.bindEditorsEvent(editors); if (editors.length &gt; 0) &#123; $(editors[0].target).focus(); &#125; else &#123; console.error(&#x27;gridedit 仅支持可编辑的列，需要在列配置editor&#x27;); &#125; this.editIndex = 0; &#125; &#125;, // 获取当前焦点控件列索引 getFocusColIndex: function (input) &#123; return $(input).parents(&#x27;td[field]&#x27;).index(); &#125;, //这里扩展 onRowClick 事件，在保留原有事件的同时 ，增加功能 appendClickRowEvent: function () &#123; var gridAction = this; var $tb = this.grid; var clickRowBeginEditFunc = function (index, row) &#123; if (gridAction.editIndex != index) &#123; if (gridAction.endEditing()) &#123; $tb.datagrid(&#x27;selectRow&#x27;, index).datagrid(&#x27;beginEdit&#x27;, index); var editors = $tb.datagrid(&#x27;getEditors&#x27;, index); gridAction.bindEditorsEvent(editors); gridAction.editorFocus(editors[0]); gridAction.editIndex = index; &#125; else &#123; $tb.datagrid(&#x27;selectRow&#x27;, gridAction.editIndex); &#125; &#125; &#125; if (options.onClickRow) &#123; var oldClickRow = options.onClickRow; options.onClickRow = function (index, row) &#123; oldClickRow.call(this, index, row); clickRowBeginEditFunc.call(this, index, row); &#125; &#125; else &#123; options.onClickRow = function (index, row) &#123; clickRowBeginEditFunc.call(this, index, row); &#125; &#125; &#125;, appendLoadSuccessEvent: function () &#123; var gridAction = this; var $tb = this.grid; if (options.onLoadSuccess) &#123; var oldLoadSucc = options.onLoadSuccess; options.onLoadSuccess = function (index, row) &#123; gridAction.renderDeleteButtom(); gridAction.editIndex = undefined; oldLoadSucc.call(this, index, row); &#125;; &#125; else &#123; options.onLoadSuccess = function (index, row) &#123; gridAction.renderDeleteButtom(); gridAction.editIndex = undefined; &#125; &#125; &#125;, deleteRow: function (row, rowIndex) &#123; var gridAction = this; if (row &amp;&amp; row.hasOwnProperty(options.primarykey)) &#123; Msg.confirm(&#x27;是否永久删除该行？ &#x27;, function (isOk) &#123; if (isOk) &#123; options.onDeleteRow.call(gridAction.grid, row[options.primarykey], row, rowIndex); gridAction.grid.datagrid(&#x27;deleteRow&#x27;, rowIndex); gridAction.editIndex = undefined; gridAction.initialBeginEditorRow(); &#125; &#125;); &#125; else &#123; gridAction.grid.datagrid(&#x27;deleteRow&#x27;, rowIndex); gridAction.editIndex = undefined; gridAction.initialBeginEditorRow(); &#125; &#125;, //根据配置添加最后一行删除列 appendDeleteColumn: function () &#123; if (options.hasDeleteColumn) &#123; var gridAction = this; var $tb = this.grid; var columns = this.grid.datagrid(&#x27;options&#x27;).columns; columns[0].push(&#123; field: &#x27;col_delete_btn&#x27;, title: &#x27;操作&#x27;, width: options.deleteColumnWidth, align: &#x27;center&#x27;, formatter: function (value, row, index) &#123; return &#x27;&lt;a href=&quot;javascript:void(0);&quot; data-id=&quot;&#x27; + row[options.primarykey] + &#x27;&quot; class=&quot;col-delete-btn&quot; &gt;&lt;/a&gt;&#x27;; &#125; &#125;); var $ptb = this.grid.parent(); //绑定点击事件 $ptb.delegate(&#x27;a.col-delete-btn&#x27;, &#x27;click&#x27;, function () &#123; var $tr = $(this).parents(&#x27;tr.datagrid-row&#x27;); var rowIndex = window.parseInt($tr.attr(&#x27;datagrid-row-index&#x27;)); var row = $tb.datagrid(&#x27;getRows&#x27;)[rowIndex]; gridAction.deleteRow(row, rowIndex); &#125;); //绑定keydown 事件 $ptb.delegate(&#x27;a.col-delete-btn&#x27;, &#x27;keydown&#x27;, function (e) &#123; if (e.key == &quot;ArrowLeft&quot;) &#123; var $tr = $(this).parents(&#x27;tr.datagrid-row-editing&#x27;); var rowIndex = window.parseInt($tr.attr(&#x27;datagrid-row-index&#x27;)); var editors = $tb.datagrid(&#x27;getEditors&#x27;, rowIndex); gridAction.editorFocus(editors[editors.length - 1]); &#125; else if (e.key == &quot;ArrowRight&quot;) &#123; var $tr = $(this).parents(&#x27;tr.datagrid-row-editing&#x27;); var rowIndex = window.parseInt($tr.attr(&#x27;datagrid-row-index&#x27;)); var editors = $tb.datagrid(&#x27;getEditors&#x27;, rowIndex); gridAction.editorFocus(editors[0]); &#125; else if (e.key == &quot;ArrowUp&quot;) &#123; var $mainTable = $(this).parents(&#x27;table.datagrid-btable&#x27;); var $tr = $(this).parents(&#x27;tr.datagrid-row-editing&#x27;); var rowIndex = window.parseInt($tr.attr(&#x27;datagrid-row-index&#x27;)); if ($tb.datagrid(&#x27;validateRow&#x27;, gridAction.editIndex) === false) return; var calcIndex = rowIndex - 1; if (calcIndex &lt; 0) return; $tb.datagrid(&#x27;endEdit&#x27;, rowIndex); $tb.datagrid(&#x27;selectRow&#x27;, calcIndex).datagrid(&#x27;beginEdit&#x27;, calcIndex); $tr = $mainTable.find(&#x27;tr.datagrid-row-editing&#x27;); rowIndex = window.parseInt($tr.attr(&#x27;datagrid-row-index&#x27;)); var editors = $tb.datagrid(&#x27;getEditors&#x27;, rowIndex); gridAction.bindEditorsEvent(editors); var $delBtn = $tr.find(&#x27;&gt;td&#x27;).eq(editors.length).find(&#x27;a.l-btn&#x27;); if ($delBtn.length &gt; 0) $delBtn.focus(); gridAction.editIndex = rowIndex; gridAction.renderDeleteButtom(); &#125; else if (e.key == &quot;ArrowDown&quot;) &#123; if ($tb.datagrid(&#x27;validateRow&#x27;, gridAction.editIndex) === false) return; var $mainTable = $(this).parents(&#x27;table.datagrid-btable&#x27;); var $tr = $(this).parents(&#x27;tr.datagrid-row-editing&#x27;); var rowIndex = window.parseInt($tr.attr(&#x27;datagrid-row-index&#x27;)); var calcIndex = rowIndex + 1; var row = $tb.datagrid(&#x27;getRows&#x27;)[calcIndex]; if (row) &#123; $tb.datagrid(&#x27;endEdit&#x27;, rowIndex); $tb.datagrid(&#x27;selectRow&#x27;, calcIndex).datagrid(&#x27;beginEdit&#x27;, calcIndex); gridAction.renderDeleteButtom(); $tr = $mainTable.find(&#x27;tr.datagrid-row-editing&#x27;); rowIndex = window.parseInt($tr.attr(&#x27;datagrid-row-index&#x27;)); var editors = $tb.datagrid(&#x27;getEditors&#x27;, rowIndex); gridAction.bindEditorsEvent(editors); var $delBtn = $tr.find(&#x27;&gt;td&#x27;).eq(editors.length).find(&#x27;a.l-btn&#x27;); if ($delBtn.length &gt; 0) $delBtn.focus(); gridAction.editIndex = rowIndex; &#125; &#125; &#125;); &#125; &#125;, bindEditorsEvent: function (editors) &#123; var gridAction = this; var $tb = this.grid; // start keydown function keydown(e) &#123; var isDirection = false; var $tr = $(this).closest(&quot;tr.datagrid-row&quot;); var rowIndex = window.parseInt($tr.attr(&#x27;datagrid-row-index&#x27;)); var calcIndex = -1; switch (e.key) &#123; case &quot;ArrowUp&quot;: calcIndex = rowIndex - 1; if (calcIndex &lt; 0) return; isDirection = true; if ($tb.datagrid(&#x27;validateRow&#x27;, gridAction.editIndex) === false) return; var focusColIndex = gridAction.getFocusColIndex(this); $tb.datagrid(&#x27;endEdit&#x27;, rowIndex); gridAction.renderDeleteButtom(); $tb.datagrid(&#x27;selectRow&#x27;, calcIndex).datagrid(&#x27;beginEdit&#x27;, calcIndex); var editors = $tb.datagrid(&#x27;getEditors&#x27;, calcIndex); gridAction.bindEditorsEvent(editors); gridAction.editorFocus(editors[focusColIndex]); gridAction.editIndex = calcIndex; break; case &quot;ArrowDown&quot;: isDirection = true; if ($tb.datagrid(&#x27;validateRow&#x27;, gridAction.editIndex) === false) return; var focusColIndex = gridAction.getFocusColIndex(this); $tb.datagrid(&#x27;endEdit&#x27;, rowIndex); gridAction.renderDeleteButtom(); calcIndex = rowIndex + 1; var row = $tb.datagrid(&#x27;getRows&#x27;)[calcIndex]; if (row) &#123; $tb.datagrid(&#x27;selectRow&#x27;, calcIndex).datagrid(&#x27;beginEdit&#x27;, calcIndex); &#125; else &#123; var newRow = options.onInitNewRow.call($tb, calcIndex); $tb.datagrid(&#x27;appendRow&#x27;, newRow || &#123;&#125;); $tb.datagrid(&#x27;selectRow&#x27;, calcIndex).datagrid(&#x27;beginEdit&#x27;, calcIndex); &#125; var editors = $tb.datagrid(&#x27;getEditors&#x27;, calcIndex); gridAction.bindEditorsEvent(editors); gridAction.editorFocus(editors[focusColIndex]); gridAction.editIndex = calcIndex; break; case &quot;ArrowLeft&quot;: var editors = $tb.datagrid(&#x27;getEditors&#x27;, rowIndex); var colIndex = gridAction.getFocusColIndex(this); var editor = editors[colIndex - 1]; if (editor) &#123; gridAction.editorFocus(editor); &#125; isDirection = true; break; case &quot;ArrowRight&quot;: var editors = $tb.datagrid(&#x27;getEditors&#x27;, rowIndex); var colIndex = gridAction.getFocusColIndex(this); var colIdx = colIndex + 1; var editor = editors[colIdx]; if (editor) &#123; gridAction.editorFocus(editor); &#125; else &#123; var $delBtn = $tr.find(&#x27;&gt;td&#x27;).eq(colIdx).find(&#x27;a.l-btn&#x27;); if ($delBtn.length &gt; 0) $delBtn.focus(); &#125; isDirection = true; break; case &quot;Enter&quot;: var editors = $tb.datagrid(&#x27;getEditors&#x27;, rowIndex); var colIndex = gridAction.getFocusColIndex(this); var colIdx = colIndex + 1; var editor = editors[colIdx]; if (editor) &#123; gridAction.editorFocus(editor); &#125; else &#123; var $delBtn = $tr.find(&#x27;&gt;td&#x27;).eq(colIdx).find(&#x27;a.l-btn&#x27;); if ($delBtn.length &gt; 0) $delBtn.focus(); &#125; isDirection = true; break; case &quot;Delete&quot;: var row = gridAction.grid.datagrid(&#x27;getRows&#x27;)[rowIndex]; gridAction.deleteRow(row, rowIndex); break; &#125; if (isDirection) &#123; e.stopPropagation();//阻止事件冒泡 ，可阻止父类事件的发生 e.preventDefault();//阻止默认行为 如A标签 &#125; &#125; // end keydown for (var index in editors) &#123; var editor = editors[index]; this.bindEditorKeydownEvent(editor, keydown); &#125; &#125;, bindEditorKeydownEvent: function (editor, keydown) &#123; if (editor.type == &#x27;checkbox&#x27;) &#123; $(editor.target).keydown(keydown); &#125; else &#123; var $target = $(editor.target[editor.type](&#x27;textbox&#x27;)); $target.unbind(&#x27;keydown&#x27;); $target.keydown(keydown); &#125; &#125;, editorFocus: function (editor) &#123; if (editor.type == &#x27;checkbox&#x27;) &#123; $(editor.target).focus(); &#125; else &#123; $(editor.target[editor.type](&#x27;textbox&#x27;)).focus(); &#125; &#125;, init: function (dom) &#123; this.grid = $(dom); this.appendClickRowEvent(); this.appendLoadSuccessEvent(); var $grid = this.grid.datagrid(options); this.appendDeleteColumn(); this.initialBeginEditorRow(); return $grid; &#125; &#125;; //对外开放的函数 var gridMethods = &#123; //清空函数 clear: function() &#123; _grid.grid.datagrid(&#x27;loadData&#x27;, &#123;total: 0 , rows: []&#125;); _grid.initialBeginEditorRow(); &#125;, endEdit: function (index) &#123; _grid.grid.datagrid(&#x27;endEdit&#x27;, index || _grid.editIndex); _grid.editIndex = undefined; &#125; &#125;; opts.__grid = _grid; opts.gridMethods = gridMethods; _grid.init(this); &#125;); &#125;; //扩展fn 函数 $.fn.gridedit.methods = &#123; clear: function (jq, param) &#123; return jq.each(function()&#123; var ge = $.data(this, &#x27;gridedit&#x27;); ge.options.gridMethods.clear(); &#125;); &#125;, endEdit: function (jq,param) &#123; return jq.each(function () &#123; var ge = $.data(this, &#x27;gridedit&#x27;); ge.options.gridMethods.endEdit(param); &#125;); &#125; &#125;;&#125;); 使用示例123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;&lt;/title&gt; &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://www.jeasyui.com/easyui/themes/default/easyui.css&quot;&gt; &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://www.jeasyui.com/easyui/themes/icon.css&quot;&gt; &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://www.jeasyui.com/easyui/themes/color.css&quot;&gt; &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://www.jeasyui.com/easyui/demo/demo.css&quot;&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;https://code.jquery.com/jquery-1.9.1.min.js&quot;&gt;&lt;/script&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;https://www.jeasyui.com/easyui/jquery.easyui.min.js&quot;&gt;&lt;/script&gt; &lt;!-- 这里我将插件代码 保存到另一个文件 并其名为 jquery.easyui.griedit.js ，然后引用 --&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;jquery.easyui.gridedit.js&quot;&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;h2&gt;可编辑表格&lt;/h2&gt;&lt;table id=&quot;tb&quot; &gt;&lt;/table&gt;&lt;script type=&quot;text/javascript&quot;&gt; $(function()&#123; var $tb = $(&#x27;#tb&#x27;); var cols = [[&#123; field: &#x27;text&#x27;, title: &#x27;文本&#x27;, width: 200, editor: &#x27;text&#x27; &#125;,&#123; field: &#x27;name&#x27;, title: &#x27;名称&#x27;, width: 200, editor: &#x27;text&#x27; &#125;,&#123; field: &#x27;field_1&#x27;, title: &#x27;字段1&#x27;, width: 200, editor: &#x27;datebox&#x27; &#125;,&#123; field: &#x27;field_2&#x27;, title: &#x27;字段2&#x27;, width: 200, editor: &#x27;combobox&#x27; &#125;]]; // 使用的方式和 datagrid 一样 只不过将datagrid 改为了 gridedit $tb.gridedit(&#123; columns: cols, onDeleteRow: function(val, row,index) &#123; console.log(row); console.log(&#x27;on delete row&#x27;); &#125;, onClickRow: function(index, row) &#123; console.log(&#x27;on click row&#x27;); console.log(this); &#125;, onInitNewRow: function(index) &#123; console.log(&#x27;on init new row&#x27;+ index); return &#123; name:&#x27;name &#x27;+ (index +1) &#125;; &#125; &#125;); // 生成假数据 var fakeData = []; for(var i = 0; i&lt; 10;i++) fakeData.push(&#123; name: &#x27;name &#x27; + i&#125;); // 加载假数据 $tb.gridedit(&#x27;loadData&#x27;, &#123;total: fakeData.length, rows: fakeData&#125;); // 调用方法 示例 $tb.grededit(&#x27;clear&#x27;); $tb.grededit(&#x27;endEdit&#x27;);&#125;);&lt;/script&gt; &lt;/body&gt;&lt;/html&gt;","categories":[],"tags":[{"name":"easyui","slug":"easyui","permalink":"https://luchangjiu.github.io/tags/easyui/"}]},{"title":"复制代码到word 文档美化格式","slug":"office/office-word-copy-code","date":"2022-03-26T09:30:22.000Z","updated":"2022-04-13T15:22:53.000Z","comments":true,"path":"2022/03/26/office/office-word-copy-code/","link":"","permalink":"https://luchangjiu.github.io/2022/03/26/office/office-word-copy-code/","excerpt":"","text":"说明在编写word 文档时有时候需要将代码复制到word 文档中， 但是它的格式不太好看，可以使用下面的网站来进行代码格式化后复制到文档上，就可以了。 HIGHLIGHTCODE","categories":[],"tags":[{"name":"office","slug":"office","permalink":"https://luchangjiu.github.io/tags/office/"}]},{"title":"java 中的vo、po、do、dto、bo、qo、dao、pojo的概念","slug":"java/java_vo_po_dto_bo_qo_dao_pojo_concept","date":"2022-03-22T12:55:23.000Z","updated":"2022-04-13T15:22:53.000Z","comments":true,"path":"2022/03/22/java/java_vo_po_dto_bo_qo_dao_pojo_concept/","link":"","permalink":"https://luchangjiu.github.io/2022/03/22/java/java_vo_po_dto_bo_qo_dao_pojo_concept/","excerpt":"","text":"前言来源 java 中的vo、po、do、dto、bo、qo、dao、pojo的概念 本博客仅转载记录学习 PO(persistant object) 持久对象在 o&#x2F;r 映射的时候出现的概念，如果没有 o&#x2F;r 映射，没有这个概念存在了。通常对应数据模型 ( 数据库 ), 本身还有部分业务逻辑的处理。可以看成是与数据库中的表相映射的 java 对象。最简单的 PO 就是对应数据库中某个表中的一条记录，多个记录可以用 PO 的集合。 PO 中应该不包含任何对数据库的操作。 DO（Domain Object）领域对象就是从现实世界中抽象出来的有形或无形的业务实体。一般和数据中的表结构对应。 TO(Transfer Object) ，数据传输对象在应用程序不同 tie( 关系 ) 之间传输的对象 DTO（Data Transfer Object）数据传输对象这个概念来源于J2EE的设计模式，原来的目的是为了EJB的分布式应用提供粗粒度的数据实体，以减少分布式调用的次数，从而提高分布式调用的性能和降低网络负载，但在这里，我泛指用于展示层与服务层之间的数据传输对象。 VO(view object) 值对象视图对象，用于展示层，它的作用是把某个指定页面（或组件）的所有数据封装起来。 BO(business object) 业务对象从业务模型的角度看 , 见 UML 元件领域模型中的领域对象。封装业务逻辑的 java 对象 , 通过调用 DAO 方法 , 结合 PO,VO 进行业务操作。 business object: 业务对象 主要作用是把业务逻辑封装为一个对象。这个对象可以包括一个或多个其它的对象。 比如一个简历，有教育经历、工作经历、社会关系等等。 我们可以把教育经历对应一个 PO ，工作经历对应一个 PO ，社会关系对应一个 PO 。 建立一个对应简历的 BO 对象处理简历，每个 BO 包含这些 PO 。 这样处理业务逻辑时，我们就可以针对 BO 去处理。 POJO(plain ordinary java object) 简单无规则 java 对象纯的传统意义的 java 对象。就是说在一些 Object&#x2F;Relation Mapping 工具中，能够做到维护数据库表记录的 persisent object 完全是一个符合 Java Bean 规范的纯 Java 对象，没有增加别的属性和方法。我的理解就是最基本的 Java Bean ，只有属性字段及 setter 和 getter 方法！。 DAO(data access object) 数据访问对象是一个 sun 的一个标准 j2ee 设计模式， 这个模式中有个接口就是 DAO ，它负持久层的操作。为业务层提供接口。此对象用于访问数据库。通常和 PO 结合使用， DAO 中包含了各种数据库的操作方法。通过它的方法 , 结合 PO 对数据库进行相关的操作。夹在业务逻辑与数据库资源中间。配合 VO, 提供数据库的 CRUD 操作","categories":[],"tags":[{"name":"java","slug":"java","permalink":"https://luchangjiu.github.io/tags/java/"}]},{"title":"Redis 模糊删除key","slug":"redis/redis-script-del","date":"2022-03-21T18:15:02.000Z","updated":"2022-04-13T15:22:53.000Z","comments":true,"path":"2022/03/22/redis/redis-script-del/","link":"","permalink":"https://luchangjiu.github.io/2022/03/22/redis/redis-script-del/","excerpt":"","text":"前言有时候遇到想直接在服务端批量删除key,或者通过模糊查询key 来删除redis 的数据，那可以使用下面的脚本来实现。本次操作在Ubuntu 系统操作的 编写删除命令的lua脚本redis-cli 可以通过 解析 lua 脚本来执行信息，我们可以利用这点来实现模糊删除key。 1234567891011# 创建 lua 脚本vim del.lua# 编写以下代码local key = KEYS[1]local list = redis.call(&quot;keys&quot;, key)for i, v in ipairs(list) do redis.call(&quot;del&quot;, v);end 调用脚本删除1234# 使用redis-cli 命令来解析刚刚编写的lua ，并传入需要模糊删除的key信息redis-cli -n 0 --eval /redis/script/del.lua &quot;*需要模糊删除的key*&quot; 嫌每次都要输入一大串redis-cli 的也可以再编写一个shell 脚本. 然后执行它就好了。","categories":[],"tags":[{"name":"redis","slug":"redis","permalink":"https://luchangjiu.github.io/tags/redis/"}]},{"title":"Head First 设计模式","slug":"java/Head_First_Design_Pattern","date":"2021-07-19T14:42:02.000Z","updated":"2023-03-05T14:19:42.498Z","comments":true,"path":"2021/07/19/java/Head_First_Design_Pattern/","link":"","permalink":"https://luchangjiu.github.io/2021/07/19/java/Head_First_Design_Pattern/","excerpt":"","text":"","categories":[],"tags":[{"name":"java","slug":"java","permalink":"https://luchangjiu.github.io/tags/java/"}]},{"title":"vim 使用技巧","slug":"vim/vim-skills","date":"2021-07-19T14:42:02.000Z","updated":"2022-05-03T10:52:38.000Z","comments":true,"path":"2021/07/19/vim/vim-skills/","link":"","permalink":"https://luchangjiu.github.io/2021/07/19/vim/vim-skills/","excerpt":"","text":"","categories":[],"tags":[{"name":"vim","slug":"vim","permalink":"https://luchangjiu.github.io/tags/vim/"}]},{"title":"vim 实用技巧2","slug":"vim/vim-skills2","date":"2021-07-19T14:42:02.000Z","updated":"2022-05-03T10:52:35.000Z","comments":true,"path":"2021/07/19/vim/vim-skills2/","link":"","permalink":"https://luchangjiu.github.io/2021/07/19/vim/vim-skills2/","excerpt":"","text":"","categories":[],"tags":[{"name":"vim","slug":"vim","permalink":"https://luchangjiu.github.io/tags/vim/"}]},{"title":"CentOS7下安装FastDFS","slug":"linux/fastdfs-install","date":"2020-06-26T05:28:03.000Z","updated":"2022-04-13T15:22:53.000Z","comments":true,"path":"2020/06/26/linux/fastdfs-install/","link":"","permalink":"https://luchangjiu.github.io/2020/06/26/linux/fastdfs-install/","excerpt":"","text":"应用场景当使用springcloud 微服务实现负载均衡时，遇到文件上传获取的难题，这时可以将文件放到FastDFS 服务上，只需要保存FastDFS返回的文件key 就好。 下载FastDFS安装依赖包有兴趣可以去作者大佬的博客看看,给个Star啥的。fastdfs-6.06.tar.gzlibfastcommon-1.0.43.tar.gzfastdfs-nginx-module-1.22.tar.gz 下载命令 123456789101112131415# 安装编译依赖yum -y install gcc yum -y install gcc-c++# 进入/opt 文件夹cd /opt# 创建文件夹 softwaresmkdir softwares # 进入softwares cd softwares# 下载fastdfs依赖文件wget -O fastdfs-6.06.tar.gz https://github.com/happyfish100/fastdfs/archive/V6.06.tar.gzwget -O libfastcommon-1.0.43.tar.gz https://github.com/happyfish100/libfastcommon/archive/V1.0.43.tar.gzwget -O fastdfs-nginx-module-1.22.tar.gz https://github.com/happyfish100/fastdfs-nginx-module/archive/V1.22.tar.gz 访问时依赖nginx 所以也要下载nginxnginx 官网 安装并配置安装是有顺序的，先安装 libfastcommon再安装 fastdfs， 如果有需要用到nginx，就先安装nginx，再配置fastdfs-nginx-module 包 安装libfastcommon1234567891011# 进入 /opt/softwares文件夹cd /opt/softwares# 解压 libfastcommon-1.0.43.tar.gz tar -zxvf libfastcommon-1.0.43.tar.gz# 进入解压好的文件夹里面cd libfastcommon-1.0.43/# 运行make.sh编译 ./make.sh# 安装./make.sh install 安装fastdfs12345678910# 进入 /opt/softwares文件夹cd /opt/softwares# 解压tar -zxvf fastdfs-6.06.tar.gz# 进入解压好的文件夹里面cd fastdfs-6.06# 运行make.sh编译 ./make.sh# 安装./make.sh install 配置fastdfs创建数据文件夹123456# 创建tracker 日志和数据文件存放的地址mkdir -p /data/fastdfs/tracker# 创建storage 日志和数据文件存放的地址mkdir -p /data/fastdfs/storage# 数据存放在store0 文件夹上mkdir -p /data/fastdfs/storage/store0 配置tracker.conf123456789# 进入fastdfs 配置文件目录cd /etc/fdfs # 查看配置文件ls -lh# 备份tracker.conf cp tracker.conf.sample tracker.conf# 编辑tracker.confvi tracker.conf# 配置 bash_path = /data/fastdfs/tracker 配置storage.conf 和 storage_ids.conf123456789101112131415161718 # 进入fastdfs 配置文件目录cd /etc/fdfs # 查看配置文件ls -lh# 备份storage.confcp storage.conf.sample storage.conf# 编辑storage.confvi storage.conf# group_name = group1 这里可以自定义group名称# base_path = /data/fastdfs/storage 配置storage基础路径# store_path = /data/fastdfs/storage/store0 配置数据存放路径# tracker_server = 192.168.3.12:22122 这里不能写成127.0.0.1 ，由于只有一台tracker 服务所以写本机ip 就好了# 备份storage_ids.confcp storage_ids.conf.sample storage_ids.conf# 编辑 storage_ids.confvi storage_ids.conf# 100001 group1 192.168.3.12 由于只有一个group1 所以保留一个，改成本机ip地址就好 启动服务启动服务在/etc/init.d下 启动tracker服务1234# 进入/etc/init.dcd /etc/init.d# 指定配置 文件启动 ， 可以不指定它会默认去找 tracker.conf./fdfs_trackerd start /etc/fdfs/tracker.conf 启动storage服务123456789# 进入/etc/init.dcd /etc/init.d# 指定配置 文件启动 ， 可以不指定它会默认去找 storage.conf./fdfs_storaged start /etc/sdfs/storage.conf # 如果想在本机启动多个storage 可以复制多个storage.conf 改变名字和里面配置的端口参数,# 然后通过指定配置文件启动的方式启动多个storage服务# 比如 ./fdfs_storaged start /etc/sdfs/storage1.conf # ./fdfs_storaged start /etc/sdfs/storage2.conf 等，启动多个storage 安装nginx先安装nginx 依赖包123yum install -y pcre pcre-develyum install -y zlib zlib-develyum install -y openssl openssl-devel 下载nginx并解压123cd /opt/softwares/wget -c https://nginx.org/download/nginx-1.16.1.tar.gztar -zxvf nginx-1.16.1.tar.gz 配置并安装nginx123456789# 进入解压后的目录cd nginx-1.16.1 # 执行默认配置./configure# 编译make# 安装make install# 可以使用&amp;&amp; 符号连起来一起运行 make &amp;&amp; make install 启动nginxnginx 安装路径在 /usr/local/nginx ，配置文件在conf 文件夹上 12# 启动nginx /usr/local/nginx/sbin/nginx nginx 常用命令说明 命令 说明 nginx -s stop 停止 nginx -s quit 退出 nginx -s reload 重新读取配置并启动 配置FastDFS 的Nginx 模块解压 fastdfs-nginx 模块1tar -zxvf fastdfs-nginx-module-1.22.tar.gz 配置nginx12345678910# 如果启动了nginx ，先停止nginx /usr/local/nginx/sbin/nginx -s quit# 进入刚刚解压的nginx 目录cd /opt/softwares/nginx-1.16.1# 添加fastdfs-nginx模块到nginx ./configure --add-module=../fastdfs-nginx-module-1.22/src# 重新编译安装nginxmake &amp;&amp; make install 查看是否安装fastdfs-nginx如果出现 configure arguments: –add-module&#x3D;..&#x2F;fastdfs-nginx-module-1.22&#x2F;src 说明配置成功了 1/usr/local/nginx/sbin/nginx -V 编辑mod_fastdfs.conf配置文件12345678910111213# 进入/opt/softwares/fastdfs-nginx-module-1.22/srccd /opt/softwares/fastdfs-nginx-module-1.22/src# 复制 mod_fastdfs.conf 到 /etc/fdfs 目录上cp mod_fastdfs.conf /etc/fdfs/# 进入fastdfs-6.06/conf 解压目录下cd /opt/softwares/fastdfs-6.06/conf# 复制 anti-steal.jpg http.conf mime.types 到 /etc/fdfs/上cp anti-steal.jpg http.conf mime.types /etc/fdfs/# 编辑 mod_fastdfs.conf vim /etc/fdfs/mod_fastdfs.conf mod_fastdfs.conf 修改内容 #配置tracker_server 服务器地址tracker_server&#x3D;192.168.3.12:22122#需要和storage.conf 一致store_path0&#x3D;&#x2F;data&#x2F;fastdfs&#x2F;storage&#x2F;store0#如果地址中包含group 前缀需要设置为trueurl_have_group_name&#x3D;true 编辑nginx.conf 配置文件1vim /usr/loca/nginx/conf/nginx.conf #在server 下面新增#如果只有一个group1 配置location ~&#x2F;group1&#x2F;M00 { ngx_fastdfs_module;}#如果多个group可以使用正则,配置多个group 的时候用到location ~&#x2F;group([0-9])&#x2F;M00 { ngx_fastdfs_module;} 启动nginx1/usr/local/nginx/sbin/nginx 查看服务是否启动12345678# 查看是否启动ps aux | grep fdfs # 查看tracker端口是否正常netstat -tlnp | grep 22122 # 查看storage 端口是否正常netstat -tlnp | grep 23000# 查看nginx 端口是否正常netstat -tlnp | grep 80 上传使用方式JAVA 示例C# 示例","categories":[],"tags":[{"name":"linux","slug":"linux","permalink":"https://luchangjiu.github.io/tags/linux/"}]},{"title":"window 安装FreeSSHD 实现与linux 文件互传","slug":"windows/freesshd-install","date":"2020-06-25T13:56:01.000Z","updated":"2022-04-17T08:23:56.000Z","comments":true,"path":"2020/06/25/windows/freesshd-install/","link":"","permalink":"https://luchangjiu.github.io/2020/06/25/windows/freesshd-install/","excerpt":"","text":"应用场景在搭建 Windows Server 服务器时有时候需要在linux 系统上直接发送文件或者通过终端直接链接过来， 所以需要windows 系统支持ssh 。 下载FreeSSHD下载地址http://www.freesshd.com/?ctt=download 下载freeSSHd.exe 安装双击运行freeSSHd.exe 然后一直next 直至完成就好了。 配置在桌面双击FreeSSHd快捷方式， 然后在右下角找到启动的FreeSSHd启动程序，并打开它。 设置登陆用户点击Users 的Tab 页如图：添加登陆用户这里我配置了两个可以登陆的用户，一个使用windows 授权方式登陆，一个是我自定义的root 账号 配置日志监听点击Logging 的Tab页如图:配置日志输入设置好点击应用即可 配置登陆授权方式点击 Authentication 的Tab页如图：设置好点击应用即可 配置SSH 信息点击SSH的Tab 页如图：设置好点击应用即可根据设置的端口去防火墙入站规则设置开启， 我这里用的是默认22 端口。 配置SFTP 上传文件路径点击SFTP的Tab 页如图： 开启服务打开cmd 命令行输入命令： 123# 重新启动 FreeSSHDService服务net stop FreeSSHDServicenet start FreeSSHDService 或者打开services.msc找到windows服务FreeSSHDService点击重新启动就好如图： 测试是否链接成功使用putty 的ssh 方式链接或者在 linux 系统上直接使用ssh 链接和发送文件测试就好。","categories":[],"tags":[{"name":"windows","slug":"windows","permalink":"https://luchangjiu.github.io/tags/windows/"}]},{"title":"使用Putty 链接 linux 系统","slug":"windows/use-putty","date":"2020-06-22T14:47:05.000Z","updated":"2022-04-13T15:22:53.000Z","comments":true,"path":"2020/06/22/windows/use-putty/","link":"","permalink":"https://luchangjiu.github.io/2020/06/22/windows/use-putty/","excerpt":"","text":"说明使用putty 轻量级ssh 软件链接 linux shell 终端和互传文件。 下载文件下载 putty 软件 按照自己电脑的操作系统下载 ，可以下载 putty-64bit-0.73-installer.msi 安装使用，也可以直接下载putty.zip 解压直接使用， 由于本人不想安装直接下载putty.zip 文件。 下载后解压即可。解压后如图： 使用PUTTY.EXE链接终端双击打开PUTTY.EXE录入ip 地址和端口然后点击open 打开终端输入用户名和密码即可如图： 使用PSCP.EXE传输文件打开cmd 命令， cd 定位到PSCP.EXE的文件夹上 上传命令 123# scp 当前windows 文件 linux用户名@IP地址:/上传目录# 示例 将 test.txt 上传到linux /opt 文件夹上scp D:\\\\test.txt root@192.168.3.12:/opt 下载命令 123# scp linux用户名@IP地址:/文件地址 windows 下载目录# 示例 将 linux 上的test.txt下载到当前D盘scp root@192.168.3.12:/opt/test.txt D:\\\\ &#x2F;&#x2F;todo 其余参数解释和使用待补充 使用PSFTP.EXE传输文件双击打开PSFTP.EXE 文件输入命令 12345678910# open ip 地址 回车 然后输入用户名和密码登陆open 192.168.3.12# cd /opt 切换到指定的操作目录cd /opt# lcd d:\\\\ 切换本地windows操作的目录lcd D:\\\\# put 上传文件名put test.txt# get 下载文件名get test2.txt &#x2F;&#x2F;todo 其余参数解释和使用待补充 配置环境变量 为方便配置环境变量打开控制面板\\系统和安全\\系统打开高级系统设置点击环境变量 点击新建环境变量 变量名PUTTY_HOME, 变量值是putty 文件的目录比如我的：S:\\softwares\\common\\putty 在path系统变量后面追加 ;%PUTTY_HOME% 重新打开cmd 就可以在任意目录访问scp， putty，psftp 等命令了。 方便文件直接上传下载","categories":[],"tags":[{"name":"windows","slug":"windows","permalink":"https://luchangjiu.github.io/tags/windows/"}]},{"title":"springmvc整合百度ueditor富文本编辑器","slug":"java/springmvc-merge-ueditor","date":"2020-06-18T12:27:17.000Z","updated":"2022-04-25T16:04:20.000Z","comments":true,"path":"2020/06/18/java/springmvc-merge-ueditor/","link":"","permalink":"https://luchangjiu.github.io/2020/06/18/java/springmvc-merge-ueditor/","excerpt":"","text":"说明springmvc 页面整合百度ueditor 富文本编辑器， 使用spring自带的上传组件，替换掉ueditor 自带的jsp 上传组件， 下载ueditor， 下载jsp 版本utf-8 格式的好了 步骤一 搭建项目这里我为了方便使用了springboot 项目，在resource/static/文件夹下创建文件夹ueditor，然后解压下载好的ueditor1_4_3_3-utf8-jsp.zip文件， 将文件内容复制到ueditor 目录下，如图： 步骤二 编辑上传配置以及代码修改配置文件 ueditor.config.js 12345678910111213141516171819202122232425(function () &#123; /** * 编辑器资源文件根路径。它所表示的含义是：以编辑器实例化页面为当前路径，指向编辑器资源文件（即dialog等文件夹）的路径。 * 鉴于很多同学在使用编辑器的时候出现的种种路径问题，此处强烈建议大家使用&quot;相对于网站根目录的相对路径&quot;进行配置。 * &quot;相对于网站根目录的相对路径&quot;也就是以斜杠开头的形如&quot;/myProject/ueditor/&quot;这样的路径。 * 如果站点中有多个不在同一层级的页面需要实例化编辑器，且引用了同一UEditor的时候，此处的URL可能不适用于每个页面的编辑器。 * 因此，UEditor提供了针对不同页面的编辑器可单独配置的根路径，具体来说，在需要实例化编辑器的页面最顶部写上如下代码即可。当然，需要令此处的URL等于对应的配置。 * window.UEDITOR_HOME_URL = &quot;/xxxx/xxxx/&quot;; */ var URL = window.UEDITOR_HOME_URL || getUEBasePath(); /** * 配置项主体。注意，此处所有涉及到路径的配置别遗漏URL变量。 */ window.UEDITOR_CONFIG = &#123; //为编辑器实例添加一个路径，这个不能被注释 UEDITOR_HOME_URL: URL // 服务器统一请求接口路径 // , serverUrl: URL + &quot;jsp/controller.jsp&quot; 将这里改成下面的代码 , serverUrl: URL + &quot;/ueditor&quot;// ...... 省略下面的代码 新建UEditorController.java类 用户替换 ueditor自带的jsp 类上传组件 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259@Controller@RequestMapping(&quot;/ueditor&quot;)public class UEditorController &#123; @Value(&quot;$&#123;ueditor.imagepath&#125;&quot;) private String imageUploadPath; @Value(&quot;$&#123;ueditor.videopath&#125;&quot;) private String videoUploadPath; @Value(&quot;$&#123;ueditor.filepath&#125;&quot;) private String fileUploadPath; @Value(&quot;$&#123;spring.profiles.active&#125;&quot;) private List&lt;String&gt; active; @RequestMapping @ResponseBody public Object index(String action, HttpServletRequest request, Integer start, Integer size) throws Exception &#123; if (null == action) return config(); MultipartHttpServletRequest multipartHttpServletRequest = null; MultipartFile upfile; if (request instanceof MultipartHttpServletRequest) &#123; multipartHttpServletRequest = (MultipartHttpServletRequest) request; &#125; switch (action) &#123; case &quot;config&quot;: // 配置获取 return config(); case &quot;uploadimage&quot;: // 图片上传 upfile = multipartHttpServletRequest.getFile(&quot;upfile&quot;); return this.upfile(upfile, &quot;image&quot;, this.imageUploadPath); case &quot;uploadvideo&quot;: // 视频上传 upfile = multipartHttpServletRequest.getFile(&quot;upfile&quot;); return this.upfile(upfile, &quot;video&quot;, this.videoUploadPath); case &quot;uploadfile&quot;: // 附件上传 upfile = multipartHttpServletRequest.getFile(&quot;upfile&quot;); return this.upfile(upfile, &quot;file&quot;, this.fileUploadPath); case &quot;uploadscrawl&quot;: // 涂鸦上传 return uploadscrawl(request.getParameter(&quot;upfile&quot;)); case &quot;listimage&quot;: // 在线图片获取 return this.resources(this.imageUploadPath, start, size); case &quot;listfile&quot;: // 在线文件获取 return this.resources(this.fileUploadPath, start, size); &#125; return null; &#125; /** * 显示图片 * * @param ymd * @param imgname * @param response * @throws IOException */ @RequestMapping(&quot;/image/&#123;ymd&#125;/&#123;imgname&#125;&quot;) public void image(@PathVariable(&quot;ymd&quot;) String ymd, @PathVariable(&quot;imgname&quot;) String imgname, HttpServletResponse response) throws IOException &#123; this.responsefile(this.imageUploadPath, ymd, imgname, response); &#125; /** * 显示 视频 * * @param ymd * @param videoname * @param response * @throws IOException */ @RequestMapping(&quot;/video/&#123;ymd&#125;/&#123;videoname&#125;&quot;) public void video(@PathVariable(&quot;ymd&quot;) String ymd, @PathVariable(&quot;videoname&quot;) String videoname, HttpServletResponse response) throws IOException &#123; this.responsefile(this.videoUploadPath, ymd, videoname, response); &#125; /** * 文件响应 * * @param ymd * @param filename * @param response * @throws IOException */ @RequestMapping(&quot;/file/&#123;ymd&#125;/&#123;filename&#125;&quot;) public void file(@PathVariable(&quot;ymd&quot;) String ymd, @PathVariable(&quot;filename&quot;) String filename, HttpServletResponse response) throws IOException &#123; this.responsefile(this.fileUploadPath, ymd, filename, response); &#125; /** * 文件响应 * * @param filetype * @param ymd * @param filenamne * @param response * @throws IOException */ private void responsefile(String uploadPathPrefix, String ymd, String filenamne, HttpServletResponse response) throws IOException &#123; response.setContentType(&quot;application/octet-stream;charset=utf-8&quot;); response.setHeader(&quot;content-disposition&quot;, &quot;attachment;filename=&quot; + java.net.URLEncoder.encode(filenamne, &quot;utf-8&quot;)); String fullPath = uploadPathPrefix + File.separator + ymd + File.separator + filenamne; ; File downFile = new File(fullPath); try (OutputStream os = response.getOutputStream()) &#123; try (BufferedInputStream in = new BufferedInputStream(new FileInputStream(downFile))) &#123; int len; byte[] buf = new byte[4096]; while ((len = in.read(buf)) != -1) &#123; os.write(buf, 0, len); &#125; &#125; &#125; &#125; /** * 在线资源浏览 分页获取 * * @param resourcepath * @param start * @param size * @return */ private Map&lt;String, Object&gt; resources(String resourcepath, Integer start, Integer size) &#123; Map&lt;String, Object&gt; map = new HashMap&lt;String, Object&gt;(); map.put(&quot;state&quot;, &quot;SUCCESS&quot;);// UEDI map.put(&quot;start&quot;, start + &quot;&quot;); File file = new File(resourcepath); File[] folders = file.listFiles(); List&lt;File&gt; folderlist = Arrays.asList(folders); folderlist.sort((f1, f2) -&gt; &#123; return f2.getName().compareTo(f1.getName()); &#125;); List&lt;String&gt; listurl = new ArrayList&lt;String&gt;(0); int end = folders.length; if (end &gt; 20) end = 20; for (int i = 0; i &lt; end; i++) &#123; File folder = folders[i]; File[] files = folder.listFiles(); for (File f : files) &#123; String abspath = f.getAbsolutePath(); String[] fs = abspath.split(&quot;\\\\\\\\&quot;); String ymdpath = &quot;/&quot; + fs[fs.length - 4] + &quot;/&quot; + fs[fs.length - 3] + &quot;/&quot; + fs[fs.length - 2] + &quot;/&quot; + fs[fs.length - 1]; listurl.add(ymdpath); &#125; &#125; map.put(&quot;total&quot;, listurl.size() + &quot;&quot;); int len = start + size; if (len &gt;= listurl.size()) len = listurl.size(); listurl = listurl.subList(start, len); List&lt;Map&lt;String, String&gt;&gt; listmap = new ArrayList&lt;Map&lt;String, String&gt;&gt;(); for (int i = 0; i &lt; listurl.size(); i++) &#123; String url = listurl.get(i); Map&lt;String, String&gt; urlmap = new HashMap&lt;String, String&gt;(); urlmap.put(&quot;url&quot;, url); listmap.add(urlmap); &#125; map.put(&quot;list&quot;, listmap); return map; &#125; /** * 获取配置 * * @return * @throws IOException */ private String config() throws IOException &#123; BufferedReader reader = null; StringBuilder builder = new StringBuilder(); // 这里根据配置文件来判断 如果似乎部署jar 包的方式需要用到 classLoader 来加载配置文件 if (null != active &amp;&amp; active.contains(&quot;prod&quot;)) &#123; InputStream is = this.getClass().getClassLoader().getResourceAsStream(&quot;static/ueditor/jsp/config.json&quot;); reader = new BufferedReader(new InputStreamReader(is)); &#125; else &#123; reader = new BufferedReader( new FileReader(ResourceUtils.getFile(&quot;classpath:static/ueditor/jsp/config.json&quot;))); &#125; for (String line = &quot;&quot;; (line = reader.readLine()) != null;) &#123; builder.append(line); &#125; return builder.toString(); &#125; /** * 上传涂鸦图片 * * @param base64img * @return */ private Map&lt;String, String&gt; uploadscrawl(String base64img) throws IOException &#123; String suffix = &quot;.jpg&quot;; // 默认jpg 文件 String fileName = new SimpleDateFormat(&quot;yyyyMMddHHmmssSSS&quot;).format(new Date()) + suffix; String fullPath = &quot;&quot;; String ymd = new SimpleDateFormat(&quot;yyyyMMdd&quot;).format(new Date()); File floder = new File(this.imageUploadPath + File.separator + ymd); if (!floder.exists()) floder.mkdirs(); fullPath = floder.getPath() + File.separator + fileName; byte[] bs = Base64Utils.decodeFromString(base64img); try (OutputStream os = new FileOutputStream(new File(fullPath))) &#123; os.write(bs); os.flush(); os.close(); &#125; return ueResult(&quot;SUCCESS&quot;, String.format(&quot;/ueditor/image/%s/%s&quot;, ymd, fileName), &quot;&quot;, &quot;&quot;); &#125; /** * 上传文件 * * @param upfile 文件 * @param filetype 文件类型 image | video | file * @return * @throws IllegalStateException * @throws IOException */ private Map&lt;String, String&gt; upfile(MultipartFile upfile, String filetype, String uploadPathPrefix) throws IllegalStateException, IOException &#123; String suffix = upfile.getOriginalFilename().substring(upfile.getOriginalFilename().lastIndexOf(&quot;.&quot;)); String fileName = new SimpleDateFormat(&quot;yyyyMMddHHmmssSSS&quot;).format(new Date()) + suffix; String fullPath = &quot;&quot;; String ymd = new SimpleDateFormat(&quot;yyyyMMdd&quot;).format(new Date()); File floder = new File(uploadPathPrefix + File.separator + ymd); if (!floder.exists()) floder.mkdirs(); fullPath = floder.getPath() + File.separator + fileName; upfile.transferTo(new File(fullPath)); String vmpath = String.format(&quot;/ueditor/%s/%s/%s&quot;, filetype, ymd, fileName); return ueResult(&quot;SUCCESS&quot;, vmpath, upfile.getName(), upfile.getOriginalFilename()); &#125; /** * 返回 ueditor 参数 * * @param state * @param url * @param title * @param original * @return */ private Map&lt;String, String&gt; ueResult(String state, String url, String title, String original) &#123; Map&lt;String, String&gt; map = new HashMap&lt;String, String&gt;(); map.put(&quot;state&quot;, state);// UEDITOR的规则:不为SUCCESS则显示state的内容 map.put(&quot;url&quot;, url); // 能访问到你现在图片的路径 map.put(&quot;title&quot;, title); map.put(&quot;original&quot;, original); return map; &#125;&#125; 在application.yml 文件 新增文件保存路径 123456789101112server: port: 7001spring: profiles: active: dev # 配置启动方式 dev | prod # 配置ueditor 下载的位置ueditor: imagepath: D:\\\\ueditor\\\\image\\\\ videopath: D:\\\\ueditor\\\\video\\\\ filepath: D:\\\\ueditor\\\\file\\\\ 步骤三 测试测试页面代码 123456789101112131415&lt;html&gt;&lt;head&gt;&lt;title&gt;富文本编辑器&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;script id=&quot;container&quot; name=&quot;content&quot; type=&quot;text/plain&quot;&gt; &lt;/script&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;/ueditor/ueditor.config.js&quot;&gt;&lt;/script&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;/ueditor/ueditor.all.min.js&quot;&gt;&lt;/script&gt; &lt;script type=&quot;text/javascript&quot;&gt; var ue = UE.getEditor(&#x27;container&#x27;); &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 启动springboot 项目打开页面测试即可","categories":[],"tags":[{"name":"java","slug":"java","permalink":"https://luchangjiu.github.io/tags/java/"}]},{"title":"怎样创建hexo 的博客","slug":"hexo/create-hexo-file","date":"2020-05-30T14:16:58.000Z","updated":"2022-04-13T15:22:53.000Z","comments":true,"path":"2020/05/30/hexo/create-hexo-file/","link":"","permalink":"https://luchangjiu.github.io/2020/05/30/hexo/create-hexo-file/","excerpt":"","text":"步骤一打开命令行（我这里用的是windows 系统 用cmd 命令行） 1$ hexo new &quot;这里输入一个文件的名称（一般用英文）&quot; 步骤二在部署目录 hexo/source/_posts/ 文件夹下找到刚刚的文件以.md 结尾，然后对它进行编辑(需要熟悉markdown 语法) 步骤三编辑完成后 输入命令 123$ hexo clean ##清空缓存信息$ hexo generate ## 根据.md 格式的文件生成hexo 需要的html 静态网页$ hexo deploy ## 发布到GitHub上","categories":[],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://luchangjiu.github.io/tags/Hexo/"}]},{"title":"hexo 博客部署到gitee 上","slug":"hexo/hexo-deploy-to-gitee","date":"2020-05-30T14:16:58.000Z","updated":"2022-04-13T15:22:53.000Z","comments":true,"path":"2020/05/30/hexo/hexo-deploy-to-gitee/","link":"","permalink":"https://luchangjiu.github.io/2020/05/30/hexo/hexo-deploy-to-gitee/","excerpt":"","text":"说明以下操作在ubuntu 系统上完成。 准备工作 gitee 帐号信息 ssh git hexo 配置git 的用户信息12git config --global user.name &quot;gitee 用户名&quot;git config --global user.mail &quot;你的邮箱&quot; 生成ssh密钥1234567891011ssh-keygen -t rsa -C &quot;邮箱地址&quot;# 连续按三下回车 后 密钥信息将会生成在你的主目录下的.ssh 文件夹上面# 进入.ssh 目录下面cd /home/你的帐号名/.ssh# 查看密钥信息cat id_rsa.pub# 添加密钥信息到ssh 上ssh-add id_rsa 将生成的密钥信息配置到gitee 上 登陆码云 进入个人设置 找到安全设置–&gt; SSH公钥 填写标题,然后将刚才 cat id_rsa.pub 这个文件里面的内容复制到 公钥输入框上 点击提交即可 测试是否链接成功1234567# 执行命令:ssh -T git@gitee.com# 返回以下结果表示成功Hi 用户名! You&#x27;ve successfully authenticated, but GITEE.COM does not provide shell access. 进入到hexo 文件夹上 打开_config.yml 文件 在底下找到deploy 节点 并修改你的git地址修改时注意保证你的仓库是空的，否则hexo 上传文件时会将你原有的文件清空 123456deploy: type: git repo: git@gitee.com:你的用户名/仓库名.git branch: master 安装hexo git 1npm install hexo-deployer-git --save 上传到gitee 仓库上 12345hexo clean # 清除缓存hexo g # 生成hexo d # 部署 部署成功后进入gitee 仓库 点击服务 –&gt; Gitee Pages 进入该页面后需要手动点击更新按钮才会部署到静态页面上 点击更新按钮后等待几分钟就可以访问了","categories":[],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://luchangjiu.github.io/tags/Hexo/"}]},{"title":"如何删除Hexo 发布博客","slug":"hexo/delete-hexo-file","date":"2020-05-30T14:06:09.000Z","updated":"2022-04-13T15:22:53.000Z","comments":true,"path":"2020/05/30/hexo/delete-hexo-file/","link":"","permalink":"https://luchangjiu.github.io/2020/05/30/hexo/delete-hexo-file/","excerpt":"","text":"如何删除Hexo发布的文章进入hexo 的根目录然后进入source/_posts 文件夹下，找到需要删除的 .md文件删除 执行命令重新生成发布就好 123&gt; hexo clean&gt; hexo generate&gt; hexo deploy","categories":[],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://luchangjiu.github.io/tags/Hexo/"}]},{"title":"Bonobo Git Server 安装","slug":"git/bonobo-git-server-install-note","date":"2018-03-03T12:03:02.000Z","updated":"2023-03-05T15:38:51.502Z","comments":true,"path":"2018/03/03/git/bonobo-git-server-install-note/","link":"","permalink":"https://luchangjiu.github.io/2018/03/03/git/bonobo-git-server-install-note/","excerpt":"","text":"Bonobo Git Server 安装笔记Bonobo Git Server 是一个git远程服务仓库，适用于Windows的简单git服务器。在 IIS for Windows 上设置您自己的自托管 git 服务器。管理用户并通过一个漂亮的用户友好的图形界面完全控制您的存储库。 特点Bonobo Git Server for Windows 是一个 Web 应用程序，您可以安装在 IIS 上。它提供了一个简单的管理工具，并可以访问服务器上自托管的 git 存储库。 下载软件网址： https://bonobogitserver.com/或者github: https://github.com/jakubgarfield/Bonobo-Git-Server 安装软件步骤安装帮助文档： https://bonobogitserver.com/install/ 注意事项安装好后密码和账号默认都是admin","categories":[],"tags":[{"name":"Git","slug":"Git","permalink":"https://luchangjiu.github.io/tags/Git/"}]},{"title":"git 学习笔记","slug":"git/git-study-note","date":"2018-03-02T12:03:02.000Z","updated":"2023-03-05T14:58:33.937Z","comments":true,"path":"2018/03/02/git/git-study-note/","link":"","permalink":"https://luchangjiu.github.io/2018/03/02/git/git-study-note/","excerpt":"","text":"git 学习笔记下载并安装git 下载地址windows: https://gitforwindows.org/安装时需要勾选 git base 、git guimac or linux: https://git-scm.com/downloads 查看是否安装成功 1git --version GUI熟悉命令操作后可以使用图形化界面来操作，可以在： https://git-scm.com/downloads/guis 下载相关的图形化软件 初始配置配置文件名为： .gitconfigwindows 系统在 c:\\user\\你的计算机名\\.gitconfiglinux 系统在 ~&#x2F;.gitconfig 首先需要配置 你的邮箱和名称 123# 需要注意的是由于是外国的软件所以name 尽量配置英文git config --global user.email &#x27;xxxxx@xx.com&#x27;git config --global user.name = &#x27;xxxx&#x27; 常用命令123456789101112131415161718192021222324252627282930313233343536# 初始化新仓库git init# 克隆代码 git clone https://gitee.com/xxxxx/xxxxx.git# 克隆指定分支git clone -b 分支名 git@gitee.com:xxxx/xxxx/xxxx.git# 查看状态git status # 提交单个文件git add 文件名.后缀名# 提交所有文件git add -A # 试用通配符提交git add *.txt# 提交到仓库中git commit -m &#x27;提交信息&#x27;# 提交已经跟踪过的文件，不需要执行add git commit -a -m &#x27;提交信息&#x27;# 删除版本库和项目目录中的文件 git rm a.txt# 只删除版本库中的文件git rm --cached a.txt# 修改最后一次提交git commit --amend 初始流程123456789101112131415161718192021# 1. 克隆项目git clone https://gitee.com/xxx/xxx.git# 2. 开始开发添加a.txt或修改文件，这时新的文件并没有被版本管理，可以通过以下命令查看没有被管理的文件git clean -n# 3. 将所有操作提交到暂存区git add .# 这时再通过clean 命令查看会发现结果为空，即文件已经被版本库管理了git clean -n# 4. 不小心将文件a.txt删除了，现在可以将暂存区中的a.txt 恢复回来git checkout a.txt# 5. 完成工作后创建一个新的提交，并使用 -m 选项说明完成的工作git commit -m &#x27;说明完成的事情&#x27;# 6. 将代码提交到远程服务器，与同事或其他开发者分享代码git push 工作区git clean 命令用来从工作目录中删除所有没有跟踪（tracked）过的文件 git clean -n 是一次clean的演习，告诉你那些文件会被删除 git clean -f 删除当前目录下没有tracked 过的文件，不会删除.gitignore 指定的文件 git clean -df 删除当前目录下没有被tracked 过的文件和文件夹 git checkout . 将没有放到暂存区的所有文件恢复 git checkout a.txt 恢复没有放到暂存区的指定文件 git checkout -- a.txt 将文件从暂存区恢复（如果没有提交到暂存区，将恢复到最近版本） 暂存区 git add . 提交所有修改和新增的文件 git add -u 只提交修改文件不提交新增文件 git ls-files -s 查看暂存区文件列表 git cat-file -p xxxxx 查看暂存区文件内容 git reset 撤销上次提交到暂存区动作 日志查看 git log 查看日志 git log -p 2 查看最近2 次提交日志显示文件差异 git log --name-only 显示已修改的文件清单 git log --name-status 显示新增、修改、删除的文件清单 git log --oneline 一行显示并只显示SHA-1 的前几个字符 下面是自定义的精简日志信息(可以设置在别名上方便使用) 123git log --graph --pretty=format:&#x27;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&#x27; --abbrev-commit 分支管理分支用于为项目增加新功能或修复bug时使用 分支流程一般情况下主分支 用来存放稳定版本，在开发功能时应该由拉去新分支去完成，然后再主分支合并。所以一把修复bug 和开发新功能都应创建分支 以一个后台管理项目为例 新建一个登录模块的分支 1git branch login 切换到登录模块的分支 1git checkout login 开发并完成提交 123456# 模拟创建登录模块文件touch login.html git add .git commit -m &#x27;提交登录模块代码&#x27; 合并分支到master 1234# 切换到主分支mastergit checkout master# 合并login 模块git merge login 提交代码到master 远程分支 123git push 分支常用命令 git branch dev 创建分支dev git branch 查看分支 git checkout dev 切换到dev 分支 git checkout -b dev2 创建并切换分支 dev2 git checkout branch -m dev dev3 将分支dev 更新为dev3 名称 git merge dev 合并分支 dev 分支到当前分支 git branch -d dev 删除dev 分支 git branch -D dev 删除没有合并的分支(相当于放弃该分支的所有操作,谨慎操作) git push origin :dev 删除远程分支 git branch --no-merged 查看未合并的分支（需要切换到创建分支的分支比如master） git branch --merged 查看已经合并的分支（需切换到创建分支的分支比如master) 分支优化技巧历史版本下面是使用历史版本创建分支 git log 查看历史版本日志git checkout &#39;commit-id&#39; 切换到提交的commit-id （SHA-1 签名6 个字符）历史版本git checkout &#39;commit-id&#39; -b 新分支名称 以历史版本创建分支 reset使用reset恢复到历史提交点，重置暂存区与工作目录的内容。 reset 可选参数reset 有个三个选项可以使用 –hard 重置位置的同时，直接将working tree 工作目录、index 暂存区及repository 都重置成目标reset 节点的内容 –soft 重置位置的同时，保留working tree 工作目录和index暂存区的内容，只让repository 中的内容和reset 目标节点保持一致 –mixed(默认) 重置位置的同时，只保留working tree 工作目录的内容，但是会将index 暂存区和repository 中的内容更改和reset目标节点一致 使用示例 git reset 将add 到暂存区的内容回退 git reset --hard &#39;版本id&#39; 恢复到指定提交版本（先通过git log 查看版本号),重置stage 区和工作目录里的内容 git reset --hard HEAD^^^ 恢复前3 个版本 git reset --soft 保留工作区内容，只回退commit的动作。保留working tree 工作目录的内容，index 暂存区与working tree 工作目录内容一致，只是仓库repository中的内容的改变。 git reset HEAD -- . 撤销暂存区的文件 git reset --hard 清空工作区和暂存区的改动 git reset HEAD xx.txt 放弃已经add 暂存区的文件xx.txt 其他知识通过创建命令别名可以减少命令输入量，有几种方式进行设置 配置文件定义修改配置文件 ~&#x2F;.gitconfig 并添加以下命令别名 配置段 1234567[alias] a = add . c = commit s = status l = log b = branch 现在可以使用 git a 实现 git add . 一样的效果了 系统配置定义window 用户可以使用 &#x2F;.bashrc 或 ~&#x2F;.bash_profile 文件.mac&#x2F;linux 修改&#x2F;.zshrc 文件中定义常用的别名指令，需要首先安装zsh命令行进行扩展 12345678alias gs=&quot;git status&quot;alias gc=&quot;git commit -m &quot;alias gl=&quot;git log --graph --pretty=format:&#x27;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&#x27; --abbrev-commit&quot;alias gb=&quot;git branch&quot;alias ga=&quot;git add -A&quot;alias go=&quot;git checkout&quot;alias gp=&quot;git push;git push github&quot; 命令行直接使用 gs 就可以实现 git status 一样的效果了。 window 系统需要使用git for window 中的git bash 软件才能达到效果 .gitignore.gitignore 用于定义忽略提交的文件 所有空行或者以注释符 # 开头的行都会被git忽略 匹配模式最后跟反斜杠（/）说明要忽略的是目录。 可以使用标准的glob模型匹配 123456.idea/vendor.env/node_modules/public/storage*.txt 冲突解决不同分支修改同一个文件或不同开发者修改同一个分支文件都可能造成冲突，造成无法提交或合并代码。 使用编辑器修改冲突文件 添加暂存git add . 表示已经解决冲突 git commit -m &#39;xxxx&#39;提交完成 Stashing当你正在进行项目中某一部分的工作，里面的东西处于一个比较杂乱的状态，而你想转到其他分支上进行一些工作。问题是，你不想提交进行了一半的工作，否则以后你无法回到这个工作点 “暂存” 可以获取你工作目录的中间状态——也就是你修改过的被追踪的文件和暂存的变更——并将它保存到一个未完结变更的堆栈中，随时可以重新应用。 储藏工作 git stash 查看储藏列表 git stash list 应用最近的储藏 git stash apply 应用更早的储藏 git stash apply stash@&#123;2&#125; 删除储藏git stash drop stash@&#123;0&#125; 应用并删除储藏 git stash pop TagGit 也可以对某一时间点上的版本打上标签 ，用于发布软件版本如 v1.0 添加标签 git tag v1.0 列出标签 git tag 推送标签 git push --tags 删除标签 git tag -d v1.0.1 删除远程标签 git push origin :v1.0.1 打包发布1git archive master --prefix=&#x27;xxx/&#x27; --format=zip &gt; xxx.zip 远程仓库创建仓库可以使用 github 或者 自己搭建的gitlib（linux） 和 Bonobo Git Server （windows） 作为远程仓库 github 步骤 在远程仓库上创建仓库 为方便不需要每次都输入密码github 可以使用本机ssh 生成密钥 ssh 生成密钥的步骤 3.1. 运行命令 1ssh-keygen -t rsa 3.2. 如果不需要特别填写信息可以一路回车知道结束，此时在系统的~/.ssh 目录中会有id_rsa密钥和id_rsa.pub公钥. 用记事本或其他编辑器打开id_rsa.pub 复制上面的公钥 打开github 上的 Settings 下的 SSH and GPG keys 将复制到的公钥信息粘贴到上面即可 Boonobo Git Server 创建仓库 通过 git clone https://xxxxx.com/xxxx/xxx.git 拉去代码 git push时会有录入密码的提示 如果不想重复录入密码，可以执行git config credential.helper store 命令，在本仓库中存储密码，如果需要全局配置 则使用git config --global credential.helper store 关联远程 创建本地库并完成初始提交 12345git inittouch xxxx.txtecho &#x27;gaga&#x27; &gt; xxxx.txtgit add -Agit commit -m &#x27;initial&#x27; 添加远程仓库 1git remote add origin git@github.com:xxxxx/xxx.git 查看远程库 1git remote -v 推送数据到远程仓库 1git push -u origin master 删除远程仓库关联 1git remote rm origin pull拉取远程主机某个分支更新，在与本地指定分支合并 拉取origin主机的 dev分支与本地的master分支合并 1git pull origin dev:master 拉取origin主机的dev分支与当前分支合并 1git pull origin dev 如果远程分支与当前分支同名直接执行 1git pull pushgit push 命令用于将本地分支的更新，推送到远程主机。 将当前分支推送到 origin主机的对应分支（如果当前分支只有一个追踪分支，可省略主机名origin） 1git push [origin] 使用-u 选项指定一个默认主机，这样以后久可以不加任何参数直接使用 git push 1git push -u origin master 删除远程 dev 分支 1git push origni --delete dev 本地dev 分支关联远程分支并推送 1git push --set-upstream origin dev 多库提交在push 时可以将代码提交到多个远程仓库上。 123456# 增加一个远程库git remote add github git@github.com:xxxx/xxxx.git# git remote add custom_repo http://xxxx.com:80/xxxx/xxx.git# 提交到远程库git push github &amp; git push custom_repo 可以在~&#x2F;.bashrc 中定义别名方便同时push 到多个远程库 1alias gp=&#x27;git push &amp; git push github&#x27; 常见问题git pull 提示错误 fatal: refusing to merge unrelated histories造成 fatal: refusing to merge unrelated histories错误的原因有以下几点： 有一个包含一些提交的新 Git 存储库。然后，您尝试从现有的远程仓库中提取。合并变得不兼容，因为分支和远程拉取的历史不同。当你试图合并两个完全不相关的分支时，Git 看到了这种情况，它不知道该怎么做。 目录有问题.git。它可能在某些时候被意外删除或损坏。如果您克隆或清理了项目，则可能会发生这种情况。此处发生错误是因为 Git 没有有关本地项目历史的必要信息。 当您尝试从远程仓库推送或拉取数据时，分支位于不同的HEAD位置，并且由于缺乏共性而无法匹配。我出现的问题是，远程的代码没有先clone到本地，所以不兼容。 解决办法是： 在git pull和git push命令中添加–allow-unrelated-histories让git允许提交不关联的历史代码。 123git pull origin master --allow-unrelated-historiesgit push origin master --allow-unrelated-histories","categories":[],"tags":[{"name":"Git","slug":"Git","permalink":"https://luchangjiu.github.io/tags/Git/"}]},{"title":"使用Nuget 安装 SQLite 小型数据库","slug":"donet/use-nuget-install-sqlite","date":"2017-10-29T14:07:04.000Z","updated":"2022-04-13T15:22:53.000Z","comments":true,"path":"2017/10/29/donet/use-nuget-install-sqlite/","link":"","permalink":"https://luchangjiu.github.io/2017/10/29/donet/use-nuget-install-sqlite/","excerpt":"","text":"说明记录一下 使用Nuget 安装 SQLite 小型数据库，并记录使用示例 操作步骤如下第1步 下载安装方式 去nuget 直接下载System.Data.SQLite.dll然后引用 在VS 工具 –&gt; Nuget包管理器 –&gt; 程序包管理器控制台 安装dll12# 输入命令安装，也可以使用可视化工具安装Install-Package System.Data.SQLite -Version 1.0.105.2 第2步 新建Sqlite 数据库 使用CodeFirst 创建实体类 要求和表的字段一一对应 其他特性不列举1234567891011121314/// &lt;summary&gt;/// 实体类/// &lt;/summary&gt;[Table(&quot;表名&quot;)]public class TestTable&#123; [Key] public String guid &#123; get; set; &#125; public String field01 &#123;get; set;&#125; public String field02 &#123;get; set;&#125; //。。。。&#125; 新建ConnectionString链接信息和DBContext类 123456789101112&lt;!-- app.config 配置--&gt;&lt;!-- 更改或添加providers --&gt; &lt;providers&gt; &lt;provider invariantName=&quot;System.Data.SqlClient&quot; type=&quot;System.Data.Entity.SqlServer.SqlProviderServices, EntityFramework.SqlServer&quot; /&gt; &lt;provider invariantName=&quot;System.Data.SQLite.EF6&quot; type=&quot;System.Data.SQLite.EF6.SQLiteProviderServices, System.Data.SQLite.EF6&quot; /&gt; &lt;provider invariantName=&quot;System.Data.SQLite&quot; type=&quot;System.Data.SQLite.EF6.SQLiteProviderServices, System.Data.SQLite.EF6 &quot; /&gt; &lt;/providers&gt;&lt;!-- 添加 connectionString --&gt;&lt;connectionStrings&gt; &lt;add name=&quot;SQLiteDbContext&quot; connectionString=&quot;Data Source=CarInfoDB.sqlite&quot; providerName=&quot;System.Data.SQLite.EF6&quot; /&gt;&lt;/connectionStrings&gt; 12345678910//C# 代码配置 public class SQLiteDbContext : DbContext&#123; // 可以使用 base 指定链接名 ， 也可以不指定但类名 要和链接名一致 //public SQLiteDbContext() : base(&quot;SQLiteDbContext&quot;) &#123; //&#125; public DbSet&lt;TestTable&gt; TestTableEntities &#123; get; set; &#125;&#125; 第3步 测试是否自动生成sqlite数据库12345public void TestConn() &#123; SQLiteDbContext dbCxt = new SQLiteDbContext(); var res = dbCxt.TestTableEntities.Where(m =&gt; true).Count(); System.Console.WriteLine(res);&#125;","categories":[],"tags":[{"name":"C#","slug":"C","permalink":"https://luchangjiu.github.io/tags/C/"}]},{"title":"PL/SQL Developer 远程链接 Oracle 数据库","slug":"oracle/plsql-Developer-connect-oracle","date":"2016-12-12T04:13:23.000Z","updated":"2022-04-27T16:05:02.000Z","comments":true,"path":"2016/12/12/oracle/plsql-Developer-connect-oracle/","link":"","permalink":"https://luchangjiu.github.io/2016/12/12/oracle/plsql-Developer-connect-oracle/","excerpt":"","text":"说明本机无需安装Oracle ， 只需要安装PL&#x2F;SQL 和Oracle 驱动 即可远程链接Oracle 数据库 。 第1步 下载工具 pl&#x2F;sql 工具官网 oracle 驱动包 官网 第2步 先安装pl&#x2F;sql安装过程 略 第3步 解压oracle 驱动3.1 解压 instantclient_12_1 放到指定目录3.2 在instantclient_12_1 里面 新建文件夹 NETWORK&#x2F;ADMIN&#x2F;3.3 再新建一个文件 tnsnames.ora （这里注意tnsnames.org 是固定写法）文件内容配置oracle 链接信息 第4步 环境配置4.1 进入windows 环境变量配置4.2 配置信息如下：ORACLE_HOME &#x3D; F:\\instantclient_12_1 &#x2F;&#x2F;指定的目录TNS_ADMIN &#x3D; F:\\instantclient_12_1\\NETWORK\\ADMIN &#x2F;&#x2F;配置 tsn文件路径NLS_LANG &#x3D; SIMPLIFIED CHINESE_CHINA.ZHS16GBK &#x2F;&#x2F;配置编码在path 最后添加 %ORACLE_HOME% 第5步 配置PL&#x2F;SQL5.1 打开pl&#x2F;sql 菜单 Tools –&gt; Preferences 如图： 最后一步 重启PL&#x2F;SQL6.1 重启pl&#x2F;sql 查看databases 是否有tnsnames 的链接 ，有的话就配置成功了","categories":[],"tags":[{"name":"oracle","slug":"oracle","permalink":"https://luchangjiu.github.io/tags/oracle/"}]}],"categories":[],"tags":[{"name":"linux","slug":"linux","permalink":"https://luchangjiu.github.io/tags/linux/"},{"name":"oracle","slug":"oracle","permalink":"https://luchangjiu.github.io/tags/oracle/"},{"name":"windows","slug":"windows","permalink":"https://luchangjiu.github.io/tags/windows/"},{"name":"java","slug":"java","permalink":"https://luchangjiu.github.io/tags/java/"},{"name":"C#","slug":"C","permalink":"https://luchangjiu.github.io/tags/C/"},{"name":"easyui","slug":"easyui","permalink":"https://luchangjiu.github.io/tags/easyui/"},{"name":"office","slug":"office","permalink":"https://luchangjiu.github.io/tags/office/"},{"name":"redis","slug":"redis","permalink":"https://luchangjiu.github.io/tags/redis/"},{"name":"vim","slug":"vim","permalink":"https://luchangjiu.github.io/tags/vim/"},{"name":"Hexo","slug":"Hexo","permalink":"https://luchangjiu.github.io/tags/Hexo/"},{"name":"Git","slug":"Git","permalink":"https://luchangjiu.github.io/tags/Git/"}]}